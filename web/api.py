#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
#
# Simple web interface to cve-search to display the last entries
# and view a specific CVE.
#
# Software is free software released under the "Modified BSD license"
#

# Copyright (c) 2013-2014   Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2014-2015   Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# imports
import os
import sys
import signal
import tornado.web
import tornado.ioloop
import tornado.options

_runPath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(os.path.join(_runPath))

from lib.Config import Configuration
import lib.CVEs as cves


class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("OK")


class StatsHandler(tornado.web.RequestHandler):
    def get(self):
        db = self.settings['db']
        cveU = db.info.find_one({'db': 'cve'})
        cpeU = db.info.find_one({'db': 'cpe'})
        cpeOtherU = db.info.find_one({'db': 'cpeother'})
        capecU = db.info.find_one({'db': 'capec'})
        d2secU = db.info.find_one({'db': 'd2sec'})
        vendorU = db.info.find_one({'db': 'vendor'})
        vfeedU = db.info.find_one({'db': 'vfeed'})
        stats = {'cveA': db.cves.count(), 'cveU': cveU['last-modified'] if cveU is not None else None,
                'cpeA': db.cpe.count(), 'cpeU': cpeU['last-modified'] if cpeU is not None else None,
                'cpeOtherA': db.cpeother.count(), 'cpeOtherU': cpeOtherU['last-modified'] if cpeOtherU is not None else None,
                'capecA': db.capec.count(), 'capecU': capecU['last-modified'] if capecU is not None else None,
                'd2secA': db.d2sec.count(), 'd2secU': d2secU['last-modified'] if d2secU is not None else None,
                'vendorA': db.vendor.count(), 'vendorU': vendorU['last-modified'] if vendorU is not None else None,
                'vfeedA': db.vfeed.count(), 'vfeedU': vfeedU['last-modified'] if vfeedU is not None else None,
                'blA': db.mgmt_blacklist.count(), 'wlA': db.mgmt_whitelist.count(),
                'dbName': Configuration.getMongoDB(), 'dbSize': db.command("dbstats")['dataSize'],
                'dbOnDisk': db.command("dbstats")['storageSize']}

        self.write(stats)



class SearchHandler(tornado.web.RequestHandler):
    def get(self, query):
        if not query:
            self.write({})
            return

        db = self.settings['db']
        collection = db.cves
        cves = collection.find({"vulnerable_configuration": {'$regex': query}}).sort("Modified", -1)
        r = []
        for cve in cves:
            cve.pop('_id')
            r.append(cve)
        self.write({"results": r})


def main():
    def sig_handler(sig, frame):
        print("Terminating...")
        tornado.ioloop.IOLoop.current().stop()

    tornado.options.parse_command_line()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    db = Configuration.getMongoConnection()
    redisdb = Configuration.getRedisVendorConnection()

    port = Configuration.getFlaskPort()

    app = tornado.web.Application([
        (r"/", MainHandler),
        (r"/api/stats", StatsHandler),
        (r"/api/search/([^/]+)", SearchHandler)
        ], db=db, redisdb=redisdb)

    app.listen(port)
    print("Listening on :%s" % port)

    tornado.ioloop.IOLoop.current().start()


if __name__ == '__main__':
    main()
